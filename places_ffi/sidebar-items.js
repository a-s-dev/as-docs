initSidebarItems({"fn":[["bookmarks_delete",""],["bookmarks_delete_everything",""],["bookmarks_get_all_with_url",""],["bookmarks_get_by_guid",""],["bookmarks_get_recent",""],["bookmarks_get_tree",""],["bookmarks_get_url_for_keyword","Safety Deref pointer, thus unsafe"],["bookmarks_insert","Safety Deref pointer, thus unsafe"],["bookmarks_reset",""],["bookmarks_search",""],["bookmarks_update","Safety Deref pointer, thus unsafe"],["get_buffer",""],["parse_url",""],["places_accept_result",""],["places_api_destroy",""],["places_api_new","Instantiate a places API. Returned api must be freed with `places_api_destroy`. Returns null and logs on errors (for now)."],["places_api_return_write_conn",""],["places_bookmarks_import_from_fennec",""],["places_bookmarks_import_from_ios",""],["places_connection_destroy",""],["places_connection_new",""],["places_delete_everything",""],["places_delete_visit",""],["places_delete_visits_between",""],["places_delete_visits_for",""],["places_destroy_bytebuffer",""],["places_destroy_string","Public destructor for strings managed by the other side of the FFI."],["places_get_top_frecent_site_infos",""],["places_get_visit_count",""],["places_get_visit_infos",""],["places_get_visit_page",""],["places_get_visit_page_with_bound",""],["places_get_visited","Safety This takes a bunch of pointers and dereferences all of them. It was written this way to avoid unnecessary overhead, but should really be rewritten to use protobufs."],["places_get_visited_urls_in_range",""],["places_history_import_from_fennec",""],["places_interrupt",""],["places_interrupt_handle_destroy","Safety This is equivalent to calling Box::from_raw with panic handling, and thus inherits [`Box::from_raw`]'s safety properties. That is to say, this function is wildly unsafe."],["places_match_url","Execute a query, returning a URL string or null. Returned string must be freed using `places_destroy_string`. Returns null if no match is found."],["places_new_interrupt_handle","Get the interrupt handle for a connection. Must be destroyed with `places_interrupt_handle_destroy`."],["places_new_sync_conn_interrupt_handle","Get an interrupt handle for the PlacesApi's sync connection."],["places_note_observation","Add an observation to the database. The observation is a VisitObservation represented as JSON. Errors are logged."],["places_pinned_sites_import_from_fennec",""],["places_prune_destructively",""],["places_query_autocomplete","Execute a query, returning a `Vec<SearchResult>` as a JSON string. Returned string must be freed using `places_destroy_string`. Returns null and logs on errors (for now)."],["places_reset",""],["places_run_maintenance",""],["places_wipe_local",""],["sync15_bookmarks_sync",""],["sync15_history_sync",""]],"struct":[["APIS",""],["CONNECTIONS",""]]});