initSidebarItems({"constant":[["HANDLE_MAGIC",""],["MAX_CAPACITY","The maximum capacity of a [`HandleMap`]. Attempting to instantiate one with a larger capacity will cause a panic."],["MIN_CAPACITY",""]],"enum":[["EntryState",""],["HandleError","An error representing the ways a `Handle` may be invalid."]],"fn":[["next_handle_map_id",""],["to_u16",""]],"struct":[["ConcurrentHandleMap","`ConcurrentHandleMap` is a relatively thin wrapper around `RwLock<HandleMap<Mutex<T>>>`. Due to the nested locking, it's not possible to implement the same API as [`HandleMap`], however it does implement an API that offers equivalent functionality, as well as several functions that greatly simplify FFI usage (see example below)."],["Entry",""],["HANDLE_MAP_ID_COUNTER",""],["Handle","A Handle we allow to be returned over the FFI by implementing [`IntoFfi`]. This type is intentionally not `#[repr(C)]`, and getting the data out of the FFI is done using `Handle::from_u64`, or it's implemetation of `From<u64>`."],["HandleMap","`HandleMap` is a collection type which can hold any type of value, and offers a stable handle which can be used to retrieve it on insertion. These handles offer methods for converting to and from 64 bit integers, meaning they're very easy to pass over the FFI (they also implement [`IntoFfi`] for the same purpose)."]]});